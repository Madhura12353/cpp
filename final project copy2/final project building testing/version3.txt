//
//
//
//

#include <iostream>
# include<string>
#include<fstream>
#include <cstdlib>
# include<iomanip>
void printBanner(int size, int maxBase);
using namespace std;
void conversionFromDecimal2anotherBase();
void conversionFromanyBase2decimal();
void readingDataFromFileandConvert();
void reverseArray(char remainderArray[], char reversedArray[], int& lgsize);
void convert10tob(int inputNumber, int baseNumber, ostream& outputfile);
char displeyFinalAnswer(char remainderArray[], int &lgsize, ostream& outputfile);
int getlgsize(char remainderArray[]);
int convertanybase2decimal(char charArray[], int base);
bool isValidArray(char charArray[], int& base);
char getValidArray(char charArray[], int& base);
void readingDataFromFile(double sourseBase[], double targetBase[], char initialNumber[][70], ifstream & inputFile);

void openTheInputFile(ifstream& inputFile);
string validateInput(double sBase, double tBase, char iNumber[]);
void createOutputFile(ofstream& outputfile);
void anyBase2anybase(double base, double tarbase, char initialNumber[], ostream& outputfile);
void createtable(double sourseBase[], double targetBase[], char initialNumber[][70], ostream& outputfile);
//=====================================================================
double getNumber();
int getInteger();
int getPositiveInteger();
int getIntInrange(int min, int max);
int getBaseInRange(int min, int max);
void printMenu();
int main()

{
	ofstream outputfile;
	ifstream inputFile;
	string filename;
	const int 
		    SIZE = 70,
           	MIN_BASE = 2,
		    MAX_BASE = 36;
	
	int choice=0, finalAnswer, number, base,  userInput, baseNumber,anyb2decimal;
		
	system("color E0");
	system("title Final project Numbering system by Madhura");

	printBanner(SIZE,  MAX_BASE);
	while (choice!= 4)
	{
		printMenu();

		cout << "\n\n   choice: ";
		choice = getIntInrange(1, 4);//  getIntInRange(1, 4)

		switch (choice)
		{
		case 1:
			// This function ask user the decimal number and target base
			// and the convert that number in to specific base
			conversionFromDecimal2anotherBase();
			system("pause"); system("CLS"); continue;
		case 2: 
			// This function ask user current base and initial number
			// and convert that number into decimal
			conversionFromanyBase2decimal();
			system("pause"); system("CLS"); continue;
		case 3:
			// This function reads the data from file and
			//converts data to respective target base
			readingDataFromFileandConvert();
			system("pause"); system("CLS"); continue;
		case 4:cout << "\n Thank you for converting with us.Hit ENTER to end the program.";
			cin.get();
		}
	}	
}

// This function ask user the decimal number and target base
// and the convert that number in to specific base
void conversionFromDecimal2anotherBase()
{
	ofstream outputfile;
	const int
		MIN_BASE = 2,
		MAX_BASE = 36;
	int userInput, baseNumber;
	cout << "What is the decimal number you wish to convert? ";
	userInput = getInteger();
	cout << "To what base do you want to convert " << userInput << " to? ";
	baseNumber = getBaseInRange(MIN_BASE, MAX_BASE);
	convert10tob(userInput, baseNumber, outputfile);
}

// This function ask user current base and initial number
// and convert that number into decimal
void conversionFromanyBase2decimal()
{
	int baseNumber,answer;
	const int
		MIN_BASE = 2,
		MAX_BASE = 36,
	    SIZE = 70;
	char charArray[SIZE];
	cout << "\nWhat is the current base? ";
	baseNumber = getBaseInRange(MIN_BASE, MAX_BASE);
	cout << "What is the number you want to convert to decimal? ";
	getValidArray(charArray, baseNumber);
	answer = convertanybase2decimal(charArray, baseNumber);
	cout << "\n the final answer is: " << answer;
}

// This function reads the data from file and
//converts data to respective target base
void readingDataFromFileandConvert()
{
	ifstream inputFile;
	ofstream outputfile;
	const int SIZE = 70;
	double sourseBase[SIZE], targetBase[SIZE];
	char initialNumber[SIZE][70], finalanswer[SIZE], charArray[SIZE];

	cout << "\n reading data from file: \n";
	openTheInputFile(inputFile);
	readingDataFromFile(sourseBase, targetBase, initialNumber, inputFile);
	createOutputFile(outputfile);
	createtable(sourseBase, targetBase, initialNumber, outputfile);
	inputFile.close();
	outputfile.close();
}

// This function is doing actual math and storing the remainder in array

void convert10tob(int inputNumber, int baseNumber, ostream& outputfile)
{
	char remainderArray[70];
	char digits[] = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ";
	int counter = 0, lgsize;
	char reversedArray[70];
	while (inputNumber > 0)
	{
		remainderArray[counter] = digits[inputNumber % baseNumber];
		inputNumber /= baseNumber;
		counter++;
	}
	remainderArray[counter] = '\0';
    lgsize = getlgsize(remainderArray);
	reverseArray(remainderArray, reversedArray, lgsize);
	displeyFinalAnswer(remainderArray, lgsize, outputfile);
}

//This function is calculating logical size

int getlgsize(char remainderArray[])
{
	int lgsize = 0;
	for (int i = 0; remainderArray[i] != '\0'; i++)
	{
		lgsize++;
	}
	return lgsize;
}

// In convert10to any base we got a remainder array but that array is backword
// to display the correct answer we have to read it from the end 
//so this function is just reading the array in reverse order
void reverseArray(char remainderArray[], char reversedArray[], int& lgsize)
{
	int j = 0;
	for (int i = (lgsize - 1); i >= 0; i--)
	{
		reversedArray[j] = remainderArray[i];
		j++;
	}
	reversedArray[j] = '\0';
	for (int i = 0; i < lgsize; i++)
	{
		remainderArray[i] = reversedArray[i];
	}
}

char displeyFinalAnswer(char remainderArray[], int &lgsize, ostream& outputfile)
{
	for (int i = 0; i < lgsize; i++)
	{
		outputfile << remainderArray[i];
		cout << remainderArray[i];
	}
	return remainderArray[lgsize];
}

// This function is doing actual math and returning the final answer as a total
int convertanybase2decimal(char charArray[], int base)
{
	int total = 0;
	int length = getlgsize(charArray);

	for (int i = 0; i < length; i++)
	{
		if (charArray[i] >= '0' && charArray[i] <= '9')
		{
			total += (charArray[i] - '0')*pow(base, length - i - 1);
		}
		else if (charArray[i] >= 'A' && charArray[i] <= 'Z')
		{
			total += (10 + (charArray[i] - 'A'))*pow(base, length - i - 1);
		}
		else if (charArray[i] >= 'a' && charArray[i] <= 'z')
		{
			total += (10 + (charArray[i] - 'a'))*pow(base, length - i - 1);
		}
	}
	return total;
}

// this function is retuning true for valid array and false for invalid array
bool isValidArray(char charArray[], int& base)
{
	int   lgsize = getlgsize(charArray);
	for (int i = 0; i < lgsize; i++)
	{
		if (charArray[i] < '0' || charArray[i] > 'z')
		{
			return false;
		}
		else if (charArray[i] >= '0' && charArray[i] <= '9')
		{
			if (int(charArray[i]) - '0' > base)
				return false;
		}
		else if (charArray[i] >= 'A' && charArray[i] <= 'Z')
		{
			if ((10 + (charArray[i] - 'A')) > base)
				return false;
		}
		else if (charArray[i] >= 'a' && charArray[i] <= 'z')
		{
			if ((10 + (charArray[i] - 'a')) > base)
				return false;
		}
		else return true;
	}
	return true;
}

// this function is taking array from user and then on the basis of boolean value
// of isvalidarray function proceed. if bool value is false it asks the user to enter  array untill 
// user enters valid array

char getValidArray(char charArray[], int& base)
{
	cin >> charArray;
	bool isValid = isValidArray(charArray, base);
	int  lgsize = 0;
	while (!isValid)
	{
		cout << "       Your number contains invalid digits. Try again:";
		cin >> charArray;
		isValid = isValidArray(charArray, base);
		lgsize = getlgsize(charArray);
	}
	return charArray[lgsize];
}

// this function is opening the inputfile 

void openTheInputFile(ifstream& inputFile)
{
	string filename;
	cout << "What file contains your data? ";
	cin >> ws; getline(cin, filename);

	inputFile.open(filename);
	while (inputFile.fail())
	{
		system("color b3");
		cout << "\aFailed to open file"
			<< "         Try again: ";
		cin >> ws; getline(cin, filename);
		inputFile.open(filename);
	}
	    system("color E0");
		cout << "File " << filename << " was successfully connected!";
}

/*
* This function reads the data from a file and stores it in respective char arrays
*/

void readingDataFromFile(double sourseBase[], double targetBase[], char initialNumber[][70], ifstream & inputFile)
{
	int i = 0;
	while (!(inputFile.eof()))
	{
		inputFile >> sourseBase[i] >> targetBase[i] >> initialNumber[i];
		i++;
	}
	sourseBase[i] = '\0';
	cout << "Reading complete" << endl;
}

/*
* This function computes the size of double array
*/
int getArrayLength(double dArray[])
{
	int counter = 0;
	while (dArray[counter] != '\0')
	{
		counter++;
	}
	return counter;
}

void createOutputFile(ofstream& outputfile)
{
	string outputFileName;
	cout << "\nWhere do you want the convertions to go to??\n"
		<< "\t(do not forget the file name extension) ";
	cin >> ws;
	getline(cin, outputFileName);
	outputfile.open(outputFileName);
	while (outputfile.fail())
	{
		system("color b3");
		cout << "\tFailed to open file: " << "\"" << outputFileName << "\".\n"
			<< "\tTry again: ";
		cin >> ws;
		getline(cin, outputFileName);
		outputfile.open(outputFileName);
	}
	cout << outputFileName << "file is opened succesfully \n";
}
string validateInput(double sBase, double tBase, char iNumber[])
{
	int temp = int(sBase);
	if (sBase != int(sBase))
		return  "     illegeal  sourseBase base";
	else if (sBase > 36 || sBase < 2)
		return "     Illegal  base (not in [2, 36])";
	else if (tBase > 36 || tBase < 2)
		return "     Illegal  base (not in [2, 36])";
	else if (tBase != int(tBase))
		return  "    illegeal  targetBase base";
	else if (!isValidArray(iNumber, temp))
		return "     illegal initial number";
	else
		return "valid";
}


void anyBase2anybase(double base, double tarbase, char initialNumber[], ostream& outputfile)
{
	int finalanswer;
	finalanswer=convertanybase2decimal(initialNumber, base);
	convert10tob(finalanswer, tarbase, outputfile);
}


void createtable(double sourseBase[], double targetBase[], char initialNumber[][70], ostream& outputfile)
{

	string result[30];
	string validationmsg;
	cout << endl << endl << setw(10) << "sourse base" << setw(15) << "target base" << setw(15) << "Initial Number" << setw(15) << "result\n";
	outputfile << endl << endl << setw(10) << "sourse base" << setw(15) << "target base" << setw(15) << "Initial Number" << setw(15) << "result\n";
	for (int i = 0; i < getArrayLength(sourseBase); i++)
	{
		cout << setw(8) << sourseBase[i] << setw(10) << targetBase[i] << setw(19) << initialNumber[i] << setw(15);
		outputfile << setw(8) << sourseBase[i] << setw(10) << targetBase[i] << setw(19) << initialNumber[i] << setw(15);
		validationmsg = validateInput(sourseBase[i], targetBase[i], initialNumber[i]);
		result[i] = validationmsg;	
		if (result[i] == "valid")
			anyBase2anybase(sourseBase[i], targetBase[i], initialNumber[i], outputfile);	
		else
		{
			cout << result[i];
			outputfile << result[i];
		}
		cout << endl << endl;
		outputfile << endl << endl;
	}
}

//=======================================================================
int getPositiveInteger()
{
	int userInput = getInteger();

	while (userInput <= 0)
	{
		cout << "        Your number must be greater than or equal to 1.\n"
			<< "         Try again:";
		userInput = getInteger();
	}

	return userInput;
}

int getIntInrange(int min, int max)
{
	int userInput = getPositiveInteger();
	while (userInput > max || userInput< min)
	{
		cout <<"           Your number must be less than or equal to " << max << "."
			 <<"\n         Try Again: ";
		userInput = getPositiveInteger();
	}
	return userInput;
}



double getNumber()   //   DONE
{
	double number;
	while (!(cin >> number))
	{
		cout << "        Please no letter. Try Again: ";
		cin.clear(); cin.ignore(80, '\n');

	}
	cin.ignore(80, '\n');
	return number;
}


// This function ask for integer if its double/ character it will ask again for integer 
int getInteger()     //   DONE
{
	double userInput = getNumber();

	while (int(userInput) != userInput)
	{
		cout << "\t Your number is not an integer!";
		userInput = getNumber();
	}

	return int(userInput);
}

int getBaseInRange(int min, int max)
{
	int userInput = getInteger();

	while (userInput < min || userInput >max)
	{
		cout << "        Invalid base. Base must be <= " << max << " Please try again:";  // what if less than teh min
		userInput = getInteger();
	}

	return userInput;
}

void printMenu()
{
	cout
		<< "\n 1] Convert from decimal to another base"
		<< "\n 2] Convert from an other base to decimal"
		<< "\n 3] Do conversions from an input file"
		<< "\n 4] Exit the program.";
}

void printBanner(int size, int maxBase)
{
	cout 
		<<"\n       This program converts an integer number(up to "<< size <<" digits long)"
		<<"\n                           from any base to decimal                           "
		<<"\n                             By Madhura                                       "
		<<"\n                   Includes input Validation                                  "
		<<"\n     includes any bases upto "<< maxBase <<" and accepts both upper and lower letters\n\n";
}


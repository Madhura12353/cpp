
#include<iostream>
#include <cstdio>
using namespace std;

int getInteger();
int getIntegerInRange();
//char *toBaseWhatever(int num, int rad);
char *convert10tob(int N, int b);
//char  conversiontoChar(int remainder);
	int main()
	{
		
		int N, b;
		cout << "Enter the integer to convert(N): ";
		 N = getInteger();
		cout << "Enter the base <= N: ";
		 b = getIntegerInRange();
		if (N != 0)
		{
			cout << convert10tob(N, b);
			cout << endl;
		}
		else
			cout << "0" << endl;

		system("pause");;
}


/*char *toBaseWhatever(int num, int rad)
{
	char digits[] = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz";
	int i;
	char buf[66];   /* enough space for any 64-bit in base 2 */

					/* bounds check for radix */
/*	if (rad < 2 || rad > 62)
		return NULL;
	/* if num is zero */
	/*if (!num)
		return _strdup("0");

	/* null terminate buf, and set i at end */
	/*buf[65] = '\0';
	i = 65;

	if (num > 0) {  /* if positive... */
		/*while (num) { /* until num is 0... */
					  /* go left 1 digit, divide by radix, and set digit to remainder */
		/*	buf[--i] = digits[num % rad];
			num /= rad;
		}
	}
	else {    /* same for negative, but negate the modulus and prefix a '-' */
		/*while (num) {
			buf[--i] = digits[-(num % rad)];
			num /= rad;
		}
		buf[--i] = '-';
	}
	/* return a duplicate of the used portion of buf */
	/*return _strdup(buf + i);

}*/




 //C++ Program to Convert a Decimal Base to Any Base

//#include<iostream>
//#include <cstdio>
//using namespace std;


// Convert a Decimal Base to Any Base

	 char *convert10tob(int N, int b)
 {	 

	 char digits[] = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz";
	 int remainder, division,i;
	 char letter;
	 char buf[66];

	 // null terminate buf, and set i at end 

	 buf[65] = '\0';
	 i = 65;

	 int x = N;

	 if (N == 0)
		 return 0;

	 

	 else if (x > 0)
	 {
		 while (x)
		 {
				
			  cout << "remainder: " << (buf[--i] = digits[x % b]) << endl; 
			  
			 cout << "division: " << (division = (x /= b)) << endl;
		 }
		
	 }
	
	  return _strdup(buf + i);
 }
	
	
	

	char conversiontoChar ( int remainder)
	 {

		char digits[] = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz";
		int i=65;
		char buf[66];   /* enough space for any 64-bit in base 2 */
		digits[remainder];
		return digits[remainder];

	 }

	//tO get only numbers no letters:
	
	double getNumber()   //   DONE
	{
		double number;
		while (!(cin >> number))
		{
			cout << "        Please no letter. Try Again: ";
			cin.clear(); cin.ignore(80, '\n');

		}
		cin.ignore(80, '\n');
		return number;
	}


	// This function ask for integer if its double/ character it will ask again for integer 
	int getInteger()     //   DONE
	{
		double userInput = getNumber();
		// cin.ignore(80, '\n');
		// cin >> userinput;
		while (int(userInput) != userInput)
		{
			cin.clear(); //cin.ignore(80, '\n');
			cout << "\t    " << userInput << " is not an integer. Try Again: ";
			//cin >> userinput; cin.ignore(80, '\n');
			userInput = getNumber();
		}

		return int(userInput);
	}

	int getIntegerInRange()
	{
	   double userInput = getInteger();

	   while (userInput < 2 || userInput >36)
	   {
		   cout << "        Invalid base. Base must be <= 36. Please try again:";
		   userInput = getInteger();
	   }



	return userInput;
	}